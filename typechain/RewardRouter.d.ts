/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardRouterInterface extends ethers.utils.Interface {
  functions: {
    "batchCompoundForAccounts(address[])": FunctionFragment;
    "batchStakeNovaForAccount(address[],uint256[])": FunctionFragment;
    "bnNova()": FunctionFragment;
    "bonusNovaTracker()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimEsNova()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "compound()": FunctionFragment;
    "compoundForAccount(address)": FunctionFragment;
    "esNova()": FunctionFragment;
    "feeNlpTracker()": FunctionFragment;
    "feeNovaTracker()": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "mintAndStakeNlp(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndStakeNlpETH(uint256,uint256)": FunctionFragment;
    "nlp()": FunctionFragment;
    "nlpManager()": FunctionFragment;
    "nova()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "stakeEsNova(uint256)": FunctionFragment;
    "stakeNova(uint256)": FunctionFragment;
    "stakeNovaForAccount(address,uint256)": FunctionFragment;
    "stakedNlpTracker()": FunctionFragment;
    "stakedNovaTracker()": FunctionFragment;
    "unstakeAndRedeemNlp(address,uint256,uint256,address)": FunctionFragment;
    "unstakeAndRedeemNlpETH(uint256,uint256,address)": FunctionFragment;
    "unstakeEsNova(uint256)": FunctionFragment;
    "unstakeNova(uint256)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchCompoundForAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeNovaForAccount",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "bnNova", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusNovaTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimEsNova",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compoundForAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "esNova", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeNlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeNovaTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeNlp",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeNlpETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nlp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nlpManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nova", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeEsNova",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNova",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNovaForAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedNlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedNovaTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemNlp",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndRedeemNlpETH",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEsNova",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNova",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchCompoundForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeNovaForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnNova", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusNovaTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimEsNova",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "esNova", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeNlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeNovaTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeNlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeNlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nlp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nlpManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nova", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeEsNova",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNova", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeNovaForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedNlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedNovaTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemNlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndRedeemNlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEsNova",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNova",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "StakeNlp(address,uint256)": EventFragment;
    "StakeNova(address,uint256)": EventFragment;
    "UnstakeNlp(address,uint256)": EventFragment;
    "UnstakeNova(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeNlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeNova"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeNlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeNova"): EventFragment;
}

export class RewardRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardRouterInterface;

  functions: {
    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchStakeNovaForAccount(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bnNova(overrides?: CallOverrides): Promise<[string]>;

    bonusNovaTracker(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimEsNova(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compoundForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    esNova(overrides?: CallOverrides): Promise<[string]>;

    feeNlpTracker(overrides?: CallOverrides): Promise<[string]>;

    feeNovaTracker(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _weth: string,
      _nova: string,
      _esNova: string,
      _bnNova: string,
      _nlp: string,
      _stakedNovaTracker: string,
      _bonusNovaTracker: string,
      _feeNovaTracker: string,
      _feeNlpTracker: string,
      _stakedNlpTracker: string,
      _nlpManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    mintAndStakeNlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndStakeNlpETH(
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nlp(overrides?: CallOverrides): Promise<[string]>;

    nlpManager(overrides?: CallOverrides): Promise<[string]>;

    nova(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeNovaForAccount(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedNlpTracker(overrides?: CallOverrides): Promise<[string]>;

    stakedNovaTracker(overrides?: CallOverrides): Promise<[string]>;

    unstakeAndRedeemNlp(
      _tokenOut: string,
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAndRedeemNlpETH(
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchCompoundForAccounts(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchStakeNovaForAccount(
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bnNova(overrides?: CallOverrides): Promise<string>;

  bonusNovaTracker(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimEsNova(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compoundForAccount(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  esNova(overrides?: CallOverrides): Promise<string>;

  feeNlpTracker(overrides?: CallOverrides): Promise<string>;

  feeNovaTracker(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _weth: string,
    _nova: string,
    _esNova: string,
    _bnNova: string,
    _nlp: string,
    _stakedNovaTracker: string,
    _bonusNovaTracker: string,
    _feeNovaTracker: string,
    _feeNlpTracker: string,
    _stakedNlpTracker: string,
    _nlpManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  mintAndStakeNlp(
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minNlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndStakeNlpETH(
    _minUsdg: BigNumberish,
    _minNlp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nlp(overrides?: CallOverrides): Promise<string>;

  nlpManager(overrides?: CallOverrides): Promise<string>;

  nova(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeEsNova(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeNova(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeNovaForAccount(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedNlpTracker(overrides?: CallOverrides): Promise<string>;

  stakedNovaTracker(overrides?: CallOverrides): Promise<string>;

  unstakeAndRedeemNlp(
    _tokenOut: string,
    _nlpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAndRedeemNlpETH(
    _nlpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeEsNova(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeNova(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchStakeNovaForAccount(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bnNova(overrides?: CallOverrides): Promise<string>;

    bonusNovaTracker(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimEsNova(overrides?: CallOverrides): Promise<void>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    compound(overrides?: CallOverrides): Promise<void>;

    compoundForAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    esNova(overrides?: CallOverrides): Promise<string>;

    feeNlpTracker(overrides?: CallOverrides): Promise<string>;

    feeNovaTracker(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _weth: string,
      _nova: string,
      _esNova: string,
      _bnNova: string,
      _nlp: string,
      _stakedNovaTracker: string,
      _bonusNovaTracker: string,
      _feeNovaTracker: string,
      _feeNlpTracker: string,
      _stakedNlpTracker: string,
      _nlpManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    mintAndStakeNlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeNlpETH(
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nlp(overrides?: CallOverrides): Promise<string>;

    nlpManager(overrides?: CallOverrides): Promise<string>;

    nova(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    stakeEsNova(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNova(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeNovaForAccount(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedNlpTracker(overrides?: CallOverrides): Promise<string>;

    stakedNovaTracker(overrides?: CallOverrides): Promise<string>;

    unstakeAndRedeemNlp(
      _tokenOut: string,
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeAndRedeemNlpETH(
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeEsNova(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeNova(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    StakeNlp(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    StakeNova(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    UnstakeNlp(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    UnstakeNova(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchStakeNovaForAccount(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bnNova(overrides?: CallOverrides): Promise<BigNumber>;

    bonusNovaTracker(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimEsNova(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compoundForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    esNova(overrides?: CallOverrides): Promise<BigNumber>;

    feeNlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    feeNovaTracker(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _weth: string,
      _nova: string,
      _esNova: string,
      _bnNova: string,
      _nlp: string,
      _stakedNovaTracker: string,
      _bonusNovaTracker: string,
      _feeNovaTracker: string,
      _feeNlpTracker: string,
      _stakedNlpTracker: string,
      _nlpManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndStakeNlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndStakeNlpETH(
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nlp(overrides?: CallOverrides): Promise<BigNumber>;

    nlpManager(overrides?: CallOverrides): Promise<BigNumber>;

    nova(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeNovaForAccount(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedNlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    stakedNovaTracker(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeAndRedeemNlp(
      _tokenOut: string,
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAndRedeemNlpETH(
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchCompoundForAccounts(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchStakeNovaForAccount(
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bnNova(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusNovaTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimEsNova(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compoundForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    esNova(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeNlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeNovaTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _weth: string,
      _nova: string,
      _esNova: string,
      _bnNova: string,
      _nlp: string,
      _stakedNovaTracker: string,
      _bonusNovaTracker: string,
      _feeNovaTracker: string,
      _feeNlpTracker: string,
      _stakedNlpTracker: string,
      _nlpManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndStakeNlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndStakeNlpETH(
      _minUsdg: BigNumberish,
      _minNlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nlpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nova(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeNovaForAccount(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedNlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedNovaTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeAndRedeemNlp(
      _tokenOut: string,
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndRedeemNlpETH(
      _nlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeEsNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNova(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
